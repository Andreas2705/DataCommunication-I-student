# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# DO NOT EDIT THIS FILE!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
import unittest
from unittest import TestCase
from unittest.mock import patch, MagicMock, Mock, call

from test.utils import sleep, MockRPi, clock_pin, patcher

patcher.start()


class TestButton(TestCase):
    PIN = 25
    BOUNCETIME = 20

    def setUp(self):
        from datacom.week02 import Button
        MockRPi.GPIO.reset_mock()
        self.uut = Button(self.PIN, self.BOUNCETIME)

    @patch("datacom.week01.Button.__init__")
    def test_init(self, mock_super):
        from datacom.week01 import Button as BaseButton
        from datacom.week02 import Button
        btn = Button(self.PIN)
        assert isinstance(btn, BaseButton), "Invalid class inheritance"
        mock_super.assert_called_once_with(self.PIN)
        assert self.uut._bouncetime == self.BOUNCETIME, "Bouncetime member variable not set correctly"

    def test_wait_for_press(self):
        self.uut.wait_for_press(1)
        MockRPi.GPIO.wait_for_edge.assert_called_once_with(self.PIN, MockRPi.GPIO.RISING, timeout=1)
        MockRPi.GPIO.reset_mock()
        self.uut.wait_for_press(10)
        MockRPi.GPIO.wait_for_edge.assert_called_once_with(self.PIN, MockRPi.GPIO.RISING, timeout=10)
        MockRPi.GPIO.reset_mock()
        MockRPi.GPIO.input.side_effect = clock_pin
        self.uut.wait_for_press()
        MockRPi.GPIO.wait_for_edge.assert_called_once_with(self.PIN, MockRPi.GPIO.RISING, timeout=None)

    def test_on_press(self):
        cb = Mock()
        MockRPi.GPIO.reset_mock()
        # MockRPi.GPIO.input.side_effect = clock_pin
        self.uut.on_press(cb)
        # MockRPi.GPIO.add_event_detect.assert_called_once_with(self.PIN, MockRPi.GPIO.RISING)
        MockRPi.GPIO.add_event_detect.assert_called_once()
        # cb.assert_called()        # TODO: figure out

    def test_on_release(self):
        cb = Mock()
        MockRPi.GPIO.reset_mock()
        # MockRPi.GPIO.input.side_effect = clock_pin
        self.uut.on_press(cb)
        MockRPi.GPIO.add_event_detect.assert_called_once()
        # cb.assert_called()


ButtonMock = MagicMock()


@patch('time.sleep', sleep)
@patch('datacom.week02.Button', ButtonMock)
class TestDemoButton(TestCase):
    def test_demo_button(self):
        from datacom.week02 import demo_button
        demo_button()
        print(ButtonMock.call_args_list)
        assert call(20, 20) in ButtonMock.call_args_list
        assert call(21, 20) in ButtonMock.call_args_list

#
# class TestLED(TestCase):
#     PIN = 23
#
#     def setUp(self):
#         from datacom.week01 import LED
#         MockRPi.GPIO.reset_mock()
#         self.uut = LED(self.PIN)
#
#     def test_brightness(self):
#         self.fail()
#
#     def test_on(self):
#         self.fail()
#
#     def test_off(self):
#         self.fail()
#
#
# class TestRGBLED(TestCase):
#     def test_set_color(self):
#         self.fail()


def teardownModule():
    patcher.stop()


if __name__ == '__main__':
    unittest.main()
